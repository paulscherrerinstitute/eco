# # New configuration of components:
# components is an ordered list of
# - name in parent package
# - type, describing the python Class or factory function.
# - arguments of that type args
# - kwargs of that type

# # Conventions for the type
# the call of type will try to pass a kwarg 'name' with the
# name of the component, before only calling args and kwargs.
# if arg or kwarg is of type eco.utilities.Component (dummy class)
# this indicates that an earlier initialized object is used
# (e.g. from same configuration).
from ..utilities.config import (
    Component,
    Alias,
    init_device,
    initFromConfigList,
    Configuration,
)

_eco_lazy_init = False

config = Configuration(
    "/sf/bernina/config/eco/bernina_config_eco.json", name="bernina_config"
)

components = [
    #        {
    #            'name'  : 'device_alias_name',
    #            'type'  : 'package.module.submodule:ClassOrFactory',
    #            'args'  : ['all','the','requires','args'],
    #            'kwargs': {}
    #            }
    {
        "args": ["/photonics/home/gac-bernina/eco/configuration/run_table_channels_CA"],
        "name": "_env_channels_ca",
        "desc": "CA channels added to the run_table",
        "type": "eco.devices_general.adjustable:AdjustableFS",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "run_table",
        "desc": "run table for data acquisition",
        "type": "eco.utilities.runtable:Run_Table",
        "kwargs": {
            "pgroup": config["pgroup"],
            "spreadsheet_key": config["gspread_notebook_id"],
            "devices": None,
            "alias_namespace": None,
            "channels_ca": Component("_env_channels_ca"),
        },
        "lazy": True,
    },
    {
        "type": "eco.elements.memory:set_global_memory_dir",
        "args": ["~/eco/memory"],
        "name": "path_memory",
        "kwargs": {},
        "lazy": False,
    },
    {
        "type": "eco.utilities.config:append_to_path",
        "args": config["path_exp"],
        "name": "path_exp",
        "kwargs": {},
        "lazy": False,
    },
    {
        "name": "elog",
        "type": "eco.utilities.elog:Elog",
        "args": ["https://elog-gfa.psi.ch/Bernina"],
        "kwargs": {
            "screenshot_directory": "/tmp",
        },
    },
    {
        "name": "screenshot",
        "type": "eco.utilities.elog:Screenshot",
        "args": [],
        "kwargs": {"screenshot_directory": "/sf/bernina/config/screenshots"},
    },
    {
        "args": [],
        "name": "archiver",
        "desc": "SwisFEL archiver data_buffer",
        "type": "eco.dbase.archiver:DataApi",
        "kwargs": {"pv_pulse_id": "SARES20-CVME-01-EVR0:RX-PULSEID"},
    },
    {
        "name": "fel",
        "type": "eco.fel.swissfel:SwissFel",
        "args": [],
        "kwargs": {},
        "desc": "Fel related control and feedback",
    },
    {
        "name": "slit_und",
        "type": "eco.xoptics.slits:SlitFourBlades_old",
        "args": ["SARFE10-OAPU044"],
        "kwargs": {},
        "desc": "Slit after Undulator",
    },
    # {
    #     "name": "slit_und_epics",
    #     "type": "eco.xoptics.slits:SlitFourBlades_old",
    #     "args": ["SARFE10-OAPU044"],
    #     "kwargs": {},
    #     "desc": "Slit after Undulator",
    # },
    {
        "name": "pshut_und",
        "type": "eco.xoptics.shutters:PhotonShutter",
        "args": ["SARFE10-OPSH044:REQUEST"],
        "kwargs": {},
        "z_und": 44,
        "desc": "First shutter after Undulators",
    },
    {
        "name": "sshut_opt",
        "type": "eco.xoptics.shutters:SafetyShutter",
        "args": ["SGE01-EPKT822:BST1_oeffnen"],
        "kwargs": {},
        "z_und": 115,
        "desc": "Bernina safety shutter",
    },
    {
        "name": "att_fe",
        "type": "eco.xoptics.attenuator_aramis:AttenuatorAramis",
        "args": ["SARFE10-OATT053"],
        "kwargs": {"shutter": Component("pshut_und")},
        "z_und": 53,
        "desc": "Attenuator in Front End",
    },
    # {
    #    "name": "mon_und",
    #    "z_und": 53,
    #    "desc": "Intensity/position monitor after Optics hutch",
    #    "type": "eco.xdiagnostics.intensity_monitors:SolidTargetDetectorPBPS",
    #    "args": ["SARFE10-PBPS053"],
    #    "kwargs": {},
    # },
    {
        "name": "xspect",
        "z_und": 53,
        "desc": "X-ray single shot spectrometer",
        "type": "eco.xdiagnostics.xspect:Xspect",
        "args": [],
        "kwargs": {},
    },
    {
        "name": "prof_fe",
        "args": ["SARFE10-PPRM064"] * 2,
        "kwargs": {},
        "z_und": 64,
        "desc": "Profile monitor after Front End",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "prof_mirr_alv1",
        "args": ["SAROP11-PPRM066"] * 2,
        "kwargs": {},
        "z_und": 66,
        "desc": "Profile monitor after Alvra Mirror 1",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "slit_switch",
        "z_und": 92,
        "desc": "Slit in Optics hutch after Photon switchyard and before Bernina optics",
        "type": "eco.xoptics.slits:SlitBlades",
        "args": ["SAROP21-OAPU092"],
        "kwargs": {},
    },
    {
        "name": "prof_mirr1",
        "args": ["SAROP21-PPRM094"] * 2,
        "kwargs": {},
        "z_und": 94,
        "desc": "Profile monitor after Mirror 1",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "mirr1",
        "args": [],
        "kwargs": {},
        "z_und": 92,
        "desc": "Vertical offset mirror 1",
        "type": "eco.xoptics.offsetMirrors:OffsetMirror",
        "kwargs": {"Id": "SAROP21-OOMV092"},
    },
    {
        "name": "mirr2",
        "args": [],
        "kwargs": {},
        "z_und": 96,
        "desc": "Vertical offset mirror 2",
        "type": "eco.xoptics.offsetMirrors:OffsetMirror",
        "kwargs": {"Id": "SAROP21-OOMV096"},
    },
    {
        "name": "offset",
        "args": [],
        "kwargs": {},
        "z_und": 96,
        "desc": "offset mirrors in pink mode",
        "type": "eco.xoptics.offsetMirrors_new:OffsetMirrorsBernina",
        "kwargs": {},
    },
    {
        "name": "mono",
        "args": ["SAROP21-ODCM098"],
        "kwargs": {},
        "z_und": 98,
        "desc": "DCM Monochromator",
        "type": "eco.xoptics.dcm_new:DoubleCrystalMono",
    },
    {
        "name": "mono_old",
        "args": ["SAROP21-ODCM098"],
        "kwargs": {
            "energy_sp": "SAROP21-ARAMIS:ENERGY_SP",
            "energy_rb": "SAROP21-ARAMIS:ENERGY",
        },
        "z_und": 98,
        "desc": "DCM Monochromator",
        "type": "eco.xoptics.dcm:Double_Crystal_Mono",
    },
    {
        "name": "prof_mono",
        "args": ["SAROP21-PPRM102"] * 2,
        "kwargs": {},
        "z_und": 102,
        "desc": "Profile monitor after Monochromator",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "xp",
        "args": [],
        "kwargs": {
            "Id": "SAROP21-OPPI103",
            "evronoff": "SGE-CPCW-72-EVR0:FrontUnivOut15-Ena-SP",
            "evrsrc": "SGE-CPCW-72-EVR0:FrontUnivOut15-Src-SP",
        },
        "z_und": 103,
        "desc": "X-ray pulse picker",
        "type": "eco.xoptics.pp:Pulsepick",
        "lazy": False,
    },
    # {
    #    "name": "mon_opt_old",
    #    "z_und": 133,
    #    "desc": "Intensity/position monitor after Optics hutch",
    #    "type": "eco.xdiagnostics.intensity_monitors:SolidTargetDetectorPBPS",
    #    "args": ["SAROP21-PBPS133"],
    #    "kwargs": {"VME_crate": "SAROP21-CVME-PBPS1", "link": 9},
    # },
    {
        "name": "mon_opt",
        "z_und": 133,
        "desc": "Intensity/position monitor after Optics hutch",
        "type": "eco.xdiagnostics.intensity_monitors:SolidTargetDetectorPBPS_new",
        "args": ["SAROP21-PBPS133"],
        "kwargs": {
            "VME_crate": "SAROP21-CVME-PBPS1",
            "link": 9,
            "channels": {
                "up": "SLAAR21-LSCP1-FNS:CH6:VAL_GET",
                "down": "SLAAR21-LSCP1-FNS:CH7:VAL_GET",
                "left": "SLAAR21-LSCP1-FNS:CH4:VAL_GET",
                "right": "SLAAR21-LSCP1-FNS:CH5:VAL_GET",
            },
            "calc": {
                "itot": "SLAAR21-LTIM01-EVR0:CALCI",
                "xpos": "SLAAR21-LTIM01-EVR0:CALCX",
                "ypos": "SLAAR21-LTIM01-EVR0:CALCY",
            },
        },
    },
    {
        "name": "prof_opt",
        "args": ["SAROP21-PPRM133"] * 2,
        "kwargs": {},
        "z_und": 133,
        "desc": "Profile monitor after Optics hutch",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "spect_tt",
        "args": ["SAROP21-PSEN135"],
        "kwargs": {"reduction_client_address": "http://sf-daqsync-01:8889/"},
        "z_und": 135,
        "desc": "Spectral encoding timing diagnostics before Attenuator.",
        "type": "eco.xdiagnostics.timetools:SpectralEncoder",
        "lazy": False,
    },
    {
        "name": "att",
        "args": ["SAROP21-OATT135"],
        "kwargs": {"shutter": Component("xp"), "set_limits": []},
        "z_und": 135,
        "desc": "Attenuator Bernina",
        "type": "eco.xoptics.attenuator_aramis:AttenuatorAramis",
    },
    {
        "name": "ref_laser",
        "args": ["SAROP21-OLAS136"],
        "kwargs": {},
        "z_und": 136,
        "desc": "Bernina beamline reference laser before KBs",
        "type": "eco.xoptics.reflaser_new:RefLaser_Aramis",
    },
    {
        "name": "slit_att",
        "args": ["SAROP21-OAPU136"],
        "kwargs": {},
        "z_und": 136,
        "desc": "Slits behind attenuator",
        "type": "eco.xoptics.slits:SlitPosWidth",
    },
    {
        "name": "mon_att",
        "args": ["SAROP21-PBPS138"],
        "z_und": 138,
        "desc": "Intensity/Position monitor after Attenuator",
        "type": "eco.xdiagnostics.intensity_monitors:SolidTargetDetectorPBPS",
        "kwargs": {"VME_crate": "SAROP21-CVME-PBPS2", "link": 9},
    },
    {
        "name": "det_dio",
        "args": ["SAROP21-PDIO138"],
        "z_und": 138,
        "desc": "Diode digitizer for exp data",
        "type": "eco.devices_general.detectors:DiodeDigitizer",
        "kwargs": {"VME_crate": "SAROP21-CVME-PBPS2", "link": 9},
    },
    {
        "name": "prof_att",
        "args": ["SAROP21-PPRM138"] * 2,
        "kwargs": {},
        "z_und": 138,
        "desc": "Profile monitor after Attenuator",
        "type": "eco.xdiagnostics.profile_monitors:Pprm",
    },
    {
        "name": "kb_ver",
        "args": ["SAROP21-OKBV139"],
        "z_und": 139,
        "desc": "Vertically focusing Bernina KB mirror",
        "type": "eco.xoptics.KBver:KBver",
        "kwargs": {},
    },
    {
        "args": ["SAROP21-OKBH140"],
        "name": "kb_hor",
        "z_und": 140,
        "desc": "Horizontally focusing Bernina KB mirror",
        "type": "eco.xoptics.KBhor:KBhor",
        "kwargs": {},
    },
    # {
    # "name": "spatial_tt",
    # "args": [],
    # "kwargs": {"reduction_client_address": "http://sf-daqsync-02:12003/"},
    # "z_und": 141,
    # "desc": "spatial encoding timing diagnostics before sample.",
    # "type": "eco.xdiagnostics.timetools:SpatialEncoder",
    # "lazy": True,
    # },
    # {
    # "name": "slit_kb",
    # "args": [],
    # "kwargs": {"pvname": "SARES20-MF1"},
    # "z_und": 141,
    # "desc": "Slits behind Kb",
    # "type": "eco.xoptics.slits:SlitBlades_JJ",
    # # "type": "eco.xoptics.slits:SlitBladesJJ_old",
    # },
    {
        "args": [],
        "name": "gps",
        "z_und": 142,
        "desc": "General purpose station",
        "type": "eco.endstations.bernina_diffractometers:GPS",
        "kwargs": {
            "pvname": "SARES22-GPS",
            "configuration": config["gps_config"],
            "fina_hex_angle_offset": "~/eco/reference_values/hex_pi_angle_offset.json",
        },
        "lazy": True,
    },
    # {
    #     "args": [],
    #     "name": "gps_old",
    #     "z_und": 142,
    #     "desc": "General purpose station",
    #     "type": "eco.endstations.bernina_diffractometers:GPS_old",
    #     "kwargs": {
    #         "Id": "SARES22-GPS",
    #         "configuration": config["gps_config"],
    #         "fina_hex_angle_offset": "~/eco/reference_values/hex_pi_angle_offset.json",
    #     },
    #     "lazy": True,
    # },
    # {
    #     "args": [],
    #     "name": "xrd_old",
    #     "z_und": 142,
    #     "desc": "Xray diffractometer",
    #     "type": "eco.endstations.bernina_diffractometers:XRD_old",
    #     "kwargs": {"Id": "SARES21-XRD", "configuration": config["xrd_config"]},
    # },
    {
        "args": [],
        "name": "xrd",
        "z_und": 142,
        "desc": "Xray diffractometer",
        "type": "eco.endstations.bernina_diffractometers:XRD",
        "kwargs": {
            "Id": "SARES21-XRD",
            "configuration": config["xrd_config"],
            "diff_detector": {"jf_id": "JF01T03V01"},
        },
        "lazy": True,
    },
    {
        "args": [],
        "name": "vonHamos",
        "z_und": 142,
        "desc": "Kern experiment, von Hamos vertical and horizontal stages ",
        "type": "eco.devices_general.micos_stage:stage",
        "kwargs": {
            "vonHamos_horiz_pv": config["Kern"]["vonHamos_horiz"],
            "vonHamos_vert_pv": config["Kern"]["vonHamos_vert"],
        },
    },
    {
        "args": [],
        "name": "gasjet",
        "z_und": 142,
        "desc": "ToF comm. gasjet",
        "type": "tof:jet",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "xeye",
        "z_und": 142,
        "desc": "Mobile X-ray eye in Bernina hutch",
        "type": "eco.xdiagnostics.profile_monitors:Bernina_XEYE",
        "kwargs": {
            "zoomstage_pv": config["xeye"]["zoomstage_pv"],
            "camera_pv": config["xeye"]["camera_pv"],
            "bshost": "sf-daqsync-01.psi.ch",
            "bsport": 11151,
        },
    },
    {
        "args": ["SARES20-CAMS142-M2"],
        "name": "samplecam_sideview",
        "z_und": 142,
        "desc": "",
        "type": "eco.devices_general.cameras_swissfel:CameraBasler",
        "kwargs": {},
    },
    {
        "args": ["SARES20-CAMS142-M3"],
        "name": "samplecam_inline",
        "z_und": 142,
        "desc": "",
        "type": "eco.devices_general.cameras_swissfel:CameraBasler",
        "kwargs": {},
    },
    {
        "args": ["SARES20-CAMS142-C3"],
        "name": "samplecam_xrd",
        "z_und": 142,
        "desc": "",
        "type": "eco.devices_general.cameras_swissfel:CameraBasler",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "cams_qioptiq",
        "z_und": 142,
        "desc": "Qioptic sample viewer in Bernina hutch",
        "type": "eco.endstations.bernina_cameras:Qioptiq",
        "kwargs": {
            "bshost": "sf-daqsync-01.psi.ch",
            "bsport": 11149,
            "zoomstage_pv": config["cams_qioptiq"]["zoomstage_pv"],
            "camera_pv": config["cams_qioptiq"]["camera_pv"],
        },
    },
    {
        "args": [],
        "name": "cams_sigma",
        "z_und": 142,
        "desc": "Sigma objective",
        "type": "eco.endstations.bernina_cameras:Sigma",
        "kwargs": {
            "bshost": "sf-daqsync-01.psi.ch",
            "bsport": 11149,
            "camera_pv": config["cams_sigma"]["camera_pv"],
        },
    },
    {
        "args": ["SLAAR02-TSPL-EPL"],
        "name": "phase_shifter",
        "z_und": 142,
        "desc": "Experiment laser phase shifter",
        "type": "eco.devices_general.timing:PhaseShifterAramis",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "las",
        "z_und": 142,
        "desc": "Experiment laser optics",
        "type": "eco.loptics.bernina_experiment:Laser_Exp",
        "kwargs": {"Id": "SLAAR21-LMOT", "smar_config": config["las_smar_config"]},
    },
    {
        "args": ["SLAAR21-LTIM01-EVR0"],
        "name": "laser_shutter",
        "z_und": 142,
        "desc": "Laser Shutter",
        "type": "eco.loptics.laser_shutter:laser_shutter",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "epics_channel_list",
        "desc": "epics channel list",
        "type": "eco.utilities.config:ChannelList",
        "kwargs": {
            "file_name": "/sf/bernina/config/channel_lists/default_channel_list_epics"
        },
    },
    {
        "args": [],
        "name": "epics_daq",
        "z_und": 142,
        "desc": "epics data acquisition",
        "type": "eco.acquisition.epics_data:Epicstools",
        "kwargs": {
            "channel_list": Component("epics_channel_list"),
            "default_file_path": f"/sf/bernina/data/{config['pgroup']}/res/epics_daq/",
        },
    },
    # {
    #     "args": [],
    #     "name": "daq_dia_old",
    #     "desc": "server based acquisition",
    #     "type": "eco.acquisition.dia:DIAClient",
    #     "kwargs": {
    #         "instrument": "bernina",
    #         "api_address": config["daq_address"],
    #         "pgroup": config["pgroup"],
    #         "pedestal_directory": config["jf_pedestal_directory"],
    #         "gain_path": config["jf_gain_path"],
    #         "config_default": config["daq_dia_config"],
    #         "jf_channels": config["jf_channels"],
    #         "default_file_path": None,
    #     },
    # },
    {
        "args": [
            config["checker_PV"],
            config["checker_thresholds"],
            config["checker_fractionInThreshold"],
        ],  #'SARFE10-PBPG050:HAMP-INTENSITY-CAL',[60,700],.7],
        "name": "checker",
        "desc": "checker functions for data acquisition",
        "type": "eco.acquisition.checkers:CheckerCA",
        "kwargs": {},
    },
    {
        "args": [
            "SARES20-LSCP9-FNS:CH1:VAL_GET",
            [-100000, 100000],
            config["checker_fractionInThreshold"],
        ],  #'SARFE10-PBPG050:HAMP-INTENSITY-CAL',[60,700],.7],
        "name": "checker_epics",
        "desc": "checker functions for data acquisition",
        "type": "eco.acquisition.checkers:CheckerCA",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "scans_epics",
        "desc": "epics non beam synchronous based acquisition",
        "type": "eco.acquisition.scan:Scans",
        "kwargs": {
            "data_base_dir": "scan_data",
            "scan_info_dir": f"/sf/bernina/data/{config['pgroup']}/res/scan_info",
            "default_counters": [Component("epics_daq")],
            "checker": Component("checker_epics"),
            "scan_directories": True,
            "run_table": Component("run_table"),
        },
    },
    # {
    #     "args": [],
    #     "name": "lxt",
    #     "desc": "laser timing with pockels cells and phase shifter",
    #     "type": "eco.timing.lasertiming:Lxt",
    #     "kwargs": {},
    # },
    {
        "args": [],
        "name": "xlt_epics",
        "desc": "laser timing with pockels cells and phase shifter, epics implementation by edwin",
        "type": "eco.timing.lasertiming_edwin:XltEpics",
        "kwargs": {},
    },
    {
        "args": ["SAR-CCTA-ESB"],
        "name": "seq",
        "desc": "sequencer timing application (CTA)",
        "type": "eco.timing.event_timing:CTA_sequencer",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "event_system",
        "desc": "SwissFEL timing information",
        "type": "eco.timing.event_timing_new:TimingSystem",
        "kwargs": {
            "pv_master": "SIN-TIMAST-TMA",
            "pv_pulse_id": "SARES20-CVME-01-EVR0:RX-PULSEID",
        },
    },
    {
        "args": ["SIN-TIMAST-TMA"],
        "name": "event_master",
        "desc": "SwissFEL timing master information",
        "type": "eco.timing.event_timing_new:MasterEventSystem",
        "kwargs": {},
    },
    # {
    #     "args": ["SARES20-CVME-01-EVR0"],
    #     "name": "evr_bernina",
    #     "desc": "Bernina event receiver",
    #     "type": "eco.timing.event_timing:EventReceiver",
    #     "kwargs": {},
    # },
    {
        "args": ["/photonics/home/gac-bernina/eco/configuration/channels_JF"],
        "name": "channels_JF",
        "desc": "jf detector channels",
        "type": "eco.devices_general.adjustable:AdjustableFS",
        "kwargs": {},
    },
    {
        "args": ["/photonics/home/gac-bernina/eco/configuration/channels_BS"],
        "name": "channels_BS",
        "desc": "jf detector channels",
        "type": "eco.devices_general.adjustable:AdjustableFS",
        "kwargs": {},
    },
    {
        "args": ["/photonics/home/gac-bernina/eco/configuration/channels_BSCAM"],
        "name": "channels_BSCAM",
        "desc": "jf detector channels",
        "type": "eco.devices_general.adjustable:AdjustableFS",
        "kwargs": {},
    },
    {
        "args": ["/photonics/home/gac-bernina/eco/configuration/channels_CA"],
        "name": "channels_CA",
        "desc": "jf detector channels",
        "type": "eco.devices_general.adjustable:AdjustableFS",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "default_channel_list",
        "desc": "Bernina default channels, used in daq",
        "type": "eco.utilities.config:ChannelList",
        "kwargs": {
            "file_name": "/sf/bernina/config/channel_lists/default_channel_list"
        },
        "lazy": False,
    },
    {
        "args": [],
        "name": "default_channel_list_bs",
        "desc": "Bernina default bs channels, used by bs_daq",
        "type": "eco.utilities.config:ChannelList",
        "kwargs": {
            "file_name": "/sf/bernina/config/channel_lists/default_channel_list_bs"
        },
        "lazy": False,
    },
    {
        "args": [],
        "name": "channels_spectrometer_projection",
        "desc": "",
        "type": "eco.utilities.config:ChannelList",
        "kwargs": {
            "file_name": "/sf/bernina/config/channel_lists/channel_list_PSSS_projection"
        },
        "lazy": False,
    },
    {
        "args": [],
        "name": "bs_daq",
        "desc": "bs daq writer (locally!)",
        "type": "eco.acquisition.bs_data:BStools",
        "kwargs": {
            "default_channel_list": {
                "bernina_default_channels_bs": Component("default_channel_list_bs")
            },
            "default_file_path": f"/sf/bernina/data/{config['pgroup']}/res/%s",
        },
        "lazy": False,
    },
    {
        "args": [],
        "name": "usd_table",
        "z_und": 141,
        "desc": "Upstream diagnostics table",
        "type": "eco.endstations.hexapod:HexapodSymmetrie",
        "kwargs": {"offset": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
    },
    {
        "args": [],
        "name": "kb_steering",
        "z_und": 141,
        "desc": "",
        "type": "eco.xoptics.kb_bernina:KBMirrorBernina",
        "kwargs": {
            "kb_ver": Component("kb_ver"),
            "kb_hor": Component("kb_hor"),
            "usd_table": Component("usd_table"),
        },
    },
    {
        "args": ["SARES23-"],
        "name": "slit_kb",
        "z_und": 141,
        "desc": "Upstream diagnostics slits",
        "type": "eco.xoptics.slit_USD:Upstream_diagnostic_slits",
        "kwargs": {"right": "LIC4", "left": "LIC3", "up": "LIC2", "down": "LIC1"},
    },
    {
        "args": ["SARES23-"],
        "name": "slit_cleanup",
        "z_und": 141,
        "desc": "Upstream diagnostics slits",
        "type": "eco.xoptics.slit_USD:Upstream_diagnostic_slits",
        "kwargs": {"right": "LIC7", "left": "LIC8", "up": "LIC8", "down": "LIC5"},
    },
    {
        "args": [
            [
                Component("slit_und"),
                Component("slit_switch"),
                Component("slit_att"),
                Component("slit_kb"),
            ]
        ],
        "name": "slits",
        "desc": "collection of all slits",
        "type": "eco.utilities.beamline:Slits",
        "kwargs": {},
        "lazy": False,
    },
    # {
    #     "args": [
    #         [Component("slit_switch"), Component("slit_att"), Component("slit_kb"),]
    #     ],
    #     "name": "slits",
    #     "desc": "collection of all slits",
    #     "type": "eco.utilities.beamline:Slits",
    #     "kwargs": {},
    #     "lazy": False,
    # },
    {
        "args": [],
        "name": "thc",
        "z_und": 142,
        "desc": "High field THz Chamber",
        "type": "eco.endstations.bernina_sample_environments:High_field_thz_chamber",
        "kwargs": {"Id": "SARES23"},
    },
    {
        "args": [],
        "name": "ocb",
        "z_und": 142,
        "desc": "LiNbO3 crystal breadboard",
        "type": "eco.endstations.bernina_sample_environments:LiNbO3_crystal_breadboard",
        "kwargs": {"Id": "SARES23"},
    },
    {
        "args": [],
        "name": "eos",
        "z_und": 142,
        "desc": "electro optic sampling stages",
        "type": "eco.endstations.bernina_sample_environments:Electro_optic_sampling",
        "kwargs": {
            "Id": "SARES23",
            "pgroup": config["pgroup"],
            "diode_channels": {
                "d1": "SARES20-LSCP9-FNS:CH1:VAL_GET",
                "d2": "SARES20-LSCP9-FNS:CH2:VAL_GET",
                "diff": "SARES20-LSCP9-FNS:CH3:VAL_GET",
            },
        },
    },
    {
        "args": [],
        "name": "tt_usd",
        "z_und": 141,
        "desc": "timetool in upstream diagnostics",
        "type": "eco.xdiagnostics.bsen_usd:Bsen",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "dsd",
        "z_und": 146,
        "desc": "downstream diagnostics",
        "type": "eco.xdiagnostics.dsd:DownstreamDiagnostic",
        "kwargs": {},
    },
    {
        "args": [],
        "name": "att_usd",
        "z_und": 142,
        "desc": "USD attenuator",
        "type": "eco.xdiagnostics.att_usd:att_usd_targets",
        "kwargs": {"Id": "SARES23", "xp": Component("xp")},
    },
    {
        "args": [],
        "name": "daq",
        "desc": "server based acquisition new JF stuff",
        "type": "eco.acquisition.daq_client:Daq",
        "kwargs": {
            "instrument": "bernina",
            "pgroup": config["pgroup"],
            "channels_JF": Component("channels_JF"),
            "channels_BS": Component("channels_BS"),
            "channels_BSCAM": Component("channels_BSCAM"),
            "channels_CA": Component("channels_CA"),
            "pulse_id_adj": "SLAAR21-LTIM01-EVR0:RX-PULSEID",
            "event_master": Component("event_master"),
            "detectors_event_code": 50,
        },
    },
    {
        "args": [],
        "name": "scans",
        "desc": "server based acquisition",
        "type": "eco.acquisition.scan:Scans",
        "kwargs": {
            "data_base_dir": "scan_data",
            "scan_info_dir": f"/sf/bernina/data/{config['pgroup']}/res/scan_info",
            "default_counters": [Component("daq")],
            "checker": Component("checker"),
            "scan_directories": True,
            "run_table": Component("run_table"),
            "elog": Component("elog"),
        },
        "lazy": True,
    },
]

try:
    components.extend(config["components"])
    print("Did append additional components!")
except:
    print("Could not append components from config.")
